(function () {
    const _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    const bootstrapModal = `
<div class="modal " id="crop-image-modal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header border-bottom-0">
                <button type="button" class="close img--close mt-2 mr-2" data-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body pt-0">
                <div class="px-3 px-md-5">
                    <h2 class="font-weight-light text-center mb-3">
                        Crop image
                    </h2>
                    <div class="cropping-area " style="max-width: 100%;">
                        <img src="" id="cropping-image" class="w-100">
                    </div>
                </div>
            </div>
            <div class="modal-footer border-top-0">
                <div class="px-3 px-md-5 w-100 mb-3 d-flex">
                    <button type="button" class="btn btn-secondary--gray btn-block btn-lg w-100 mr-2"
                            data-dismiss="modal">CANCEL
                    </button>
                    <button type="button" class="btn btn-success btn-block btn-lg w-100 ml-2 mt-0 text-uppercase js-crop-image"data-json="">
                        Confirm
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>`;
    const dropzonesSelector = '.dropzoner';
    const dropZones = [];
    let targetDropzone;
    let targetParams;
    const croppingImageSelector = '#cropping-image';
    const cropModalSelector = '#crop-image-modal';
    let cropper;
    let dropZoneInputs;


    $('body').append(bootstrapModal); // Добавляем модальное окно

    initDropzones(dropzonesSelector, dropZones);// Инициализация дропзон

    drawDropzones(dropZones); // Добавляем дропзоны

    $.each(dropZones, (index, dropzone) => { // обработка событй дроппинга
        const area = dropzonerArea(dropzone.elem);
        area[0].ondragover = function () { // файл на дропзоне
            area.removeClass('drop');
            area.removeClass('error');
            area.addClass('hover');
            return false;
        };
        area[0].ondragleave = function () { // файл вне дропзоны
            area.removeClass('hover');
            return false;
        };
        $(dropzonerInput(dropzone.elem)).on('change', (e) => {
            let file = e.target.files[0];
            targetDropzone = dropzone;
            updateParams();
            if ((file.size > dropzone.maxFileSize) || !(isImage(file))) {
                area.addClass('error');
                return false;
            } else {
                let reader = new FileReader();
                reader.onload = function (e) {
                    $(croppingImageSelector).attr('src', e.target.result);
                    cropper = $(croppingImageSelector).cropper(_extends({
                        cropstart: function cropstart() {
                            $(cropModalSelector).bind('hide.bs.modal', stopHiding);
                        },
                        cropend: function cropend() {
                            setTimeout(function () {
                                $(cropModalSelector).unbind('hide.bs.modal', stopHiding);
                            });
                        }
                    }, targetParams));
                    $(cropModalSelector).modal('show');
                };
                reader.readAsDataURL(file);
            }
        });
        area[0].ondrop = function (event) { // дроп файла
            const file = event.dataTransfer.files[0];
            event.preventDefault();
            area.removeClass('hover');
            area.find('img').attr('src', '');
            targetDropzone = dropzone;
            if ((file.size > dropzone.maxFileSize) || !(isImage(file))) {
                area.addClass('error');
                return false;
            } else {
                area.addClass('drop');
                const cropModal = $(cropModalSelector);
                const croppingImage = $(croppingImageSelector);
                updateParams(dropzone);
                cropModal.modal('show');

                const reader = new FileReader();
                reader.onload = function (e) {
                    croppingImage.attr('src', e.target.result);
                    cropper = $(croppingImageSelector).cropper(_extends({
                        cropstart: function cropstart() {
                            $(cropModalSelector).bind('hide.bs.modal', stopHiding);
                        },
                        cropend: function cropend() {
                            setTimeout(function () {
                                $(cropModalSelector).unbind('hide.bs.modal', stopHiding);
                            });
                        }
                    }, targetParams));
                    cropModal.modal('show');
                };
                reader.readAsDataURL(file);
            }
        };
    });


    function initDropzones(selector, target) {
        $(selector).each((index, elem) => {
            let options = {
                elem,
                buttonText: "Upload File",
                className: "default",
                btnClassName: "btn btn-outline-primary",
                name: "dropzoner-" + (index + 1),
                headerText: "Drop Your Photos Here",
                maxFileSize: "200000",
                aspectRatio: 1,
                inputId: "js-dropzoner-" + (index + 1)
            };
            options = _extends({}, options, elem.dataset);
            target.push(options);
        })
    }

    function drawDropzones(items) {
        $.each(items, (index, dropzone) => {
            $(dropzone.elem).html(`
            <div class="dropzoner-area ${dropzone.className}">
                <p>${dropzone.headerText}</p>
                <label for="dropzone-area-${index + 1}" class="${dropzone.btnClassName}">${dropzone.buttonText}</label>
                <input class="dropzone-input d-none" type="file" id="dropzone-area-${index + 1}">
                <div class="mt-3 dropzone-preview">
                    <img src="" class="">
                </div>
             </div>
        `);
            dropzone.input = $(`<input type="hidden" name="${dropzone.name}" id="${dropzone.inputId}">`);
            $(dropzone.elem).before($(dropzone.input)[0]);
        });
    }

    function updateParams() {
        console.log(targetDropzone);
        targetParams = {
            viewMode: 1,
            aspectRatio: eval(targetDropzone.aspectRatio)
        };
    }

    $(document).on('click', '.js-crop-image', function (e) {
        e.preventDefault();
        let image = $(croppingImageSelector).cropper('getCroppedCanvas').toDataURL('image/jpeg');
        $(targetDropzone.elem).find('img').attr('src', image);
        $(targetDropzone.input).val(image);
        $(targetDropzone).find('input')
        $(cropModalSelector).modal('hide');
    });

    $(cropModalSelector).on('hidden.bs.modal', function () {
        $(croppingImageSelector).cropper('destroy');
        dropzonerInput(targetDropzone.elem).val('');
    });

    function stopHiding(e) {
        e.preventDefault();
        e.stopPropagation();
        return false;
    }

    function isImage(file) {
        let fileType = file["type"];
        let ValidImageTypes = ["image/gif", "image/jpeg", "image/png", "image/jpg"];
        return $.inArray(fileType, ValidImageTypes) >= 0;
    }

    function dropzonerArea(dropzoner) {
        return $(dropzoner).find('.dropzoner-area');
    }

    function dropzonerInput(dropzoner) {
        return $(dropzoner).find('input');
    }
})()
